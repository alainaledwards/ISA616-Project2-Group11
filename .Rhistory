ggplotly(p)
sorted_data <- data %>%
group_by(Minor) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(Minor, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink', width = 0.5) +
xlab("Minor") +
ylab("Average Salary") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels by 45 degrees
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
sorted_data <- data %>%
group_by(MajorAbbr) %>%
summarize(AverageOfferCount = mean(OfferCount)) %>%
arrange(desc(AverageOfferCount))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageOfferCount), y = AverageOfferCount)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink') +
xlab("Major") +
ylab("Average Offer Count") +
theme_bw()
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2019, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2020, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2021, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
sorted_data <- data %>%
group_by(Minor) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(Minor, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink', width = 0.5) +
xlab("Minor") +
ylab("Average Salary") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels by 45 degrees
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
# Salary by Year {data-orientation=columns}
### 2019
```{r,echo=FALSE}
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT #for better tables
)
#read in data
data=readRDS("cleaned_FSB_Student_Success")
sorted_data <- data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
p1 = ggplot(data, aes(reorder(MajorAbbr,MajorAbbr, function(x)-length(x))))+
geom_bar(color="deeppink", fill = "deeppink")+
xlab("Major")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p1)
sorted_data <- data %>%
group_by(MajorAbbr, FirstGen) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create a variable for the grouping of "FirstGen" and "Not FirstGen"
sorted_data$Group <- factor(sorted_data$FirstGen, levels = c(1, 0), labels = c("First Gen", "Not First Gen"))
# Create the clustered bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.5) +
xlab("Major") +
ylab("Average Salary") +
theme_bw() +
scale_fill_manual(values = c('First Gen' = "deeppink", 'Not First Gen' = "lightblue"))
# Adjust the y-axis to show more values
max_salary <- max(sorted_data$AverageSalary, na.rm = TRUE)  # Handle NA values
if (is.finite(max_salary)) {
p <- p +
scale_y_continuous(breaks = seq(0, max_salary, by = 10000), labels = scales::dollar_format(prefix = "$"))
}
# Convert to interactive plotly plot
ggplotly(p)
sorted_data <- data %>%
group_by(MajorAbbr, Honors) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create a variable for the grouping of "FirstGen" and "Not FirstGen"
sorted_data$Group <- factor(sorted_data$Honors, levels = c(1, 0), labels = c("Honors", "Not Honors"))
# Create the clustered bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.5) +
xlab("Major") +
ylab("Average Salary") +
theme_bw() +
scale_fill_manual(values = c('Honors' = "deeppink", 'Not Honors' = "lightblue"))
# Adjust the y-axis to show more values
max_salary <- max(sorted_data$AverageSalary, na.rm = TRUE)  # Handle NA values
if (is.finite(max_salary)) {
p <- p +
scale_y_continuous(breaks = seq(0, max_salary, by = 10000), labels = scales::dollar_format(prefix = "$"))
}
# Convert to interactive plotly plot
ggplotly(p)
sorted_data <- data %>%
group_by(Minor) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(Minor, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink', width = 0.5) +
xlab("Minor") +
ylab("Average Salary") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels by 45 degrees
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2019, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, 80000, by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2020, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, 80000, by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2021, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = 'deeppink', fill = 'deeppink') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0,80000, by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT #for better tables
)
#read in data
data=readRDS("cleaned_FSB_Student_Success")
sorted_data <- data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
p1 = ggplot(data, aes(reorder(MajorAbbr,MajorAbbr, function(x)-length(x))))+
geom_bar(color="#C3142D", fill = "#C3142D")+
xlab("Major")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p1)
sorted_data <- data %>%
group_by(MajorAbbr, FirstGen) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create a variable for the grouping of "FirstGen" and "Not FirstGen"
sorted_data$Group <- factor(sorted_data$FirstGen, levels = c(1, 0), labels = c("First Gen", "Not First Gen"))
# Create the clustered bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.5) +
xlab("Major") +
ylab("Average Salary") +
theme_bw() +
scale_fill_manual(values = c('First Gen' = "#C3142D", 'Not First Gen' = "#3A3B3C"))
# Adjust the y-axis to show more values
max_salary <- max(sorted_data$AverageSalary, na.rm = TRUE)  # Handle NA values
if (is.finite(max_salary)) {
p <- p +
scale_y_continuous(breaks = seq(0, max_salary, by = 10000), labels = scales::dollar_format(prefix = "$"))
}
# Convert to interactive plotly plot
ggplotly(p)
sorted_data <- data %>%
group_by(MajorAbbr, Honors) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create a variable for the grouping of "FirstGen" and "Not FirstGen"
sorted_data$Group <- factor(sorted_data$Honors, levels = c(1, 0), labels = c("Honors", "Not Honors"))
# Create the clustered bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.5) +
xlab("Major") +
ylab("Average Salary") +
theme_bw() +
scale_fill_manual(values = c('Honors' = "#C3142D", 'Not Honors' = "#3A3B3C"))
# Adjust the y-axis to show more values
max_salary <- max(sorted_data$AverageSalary, na.rm = TRUE)  # Handle NA values
if (is.finite(max_salary)) {
p <- p +
scale_y_continuous(breaks = seq(0, max_salary, by = 10000), labels = scales::dollar_format(prefix = "$"))
}
# Convert to interactive plotly plot
ggplotly(p)
sorted_data <- data %>%
group_by(Minor) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(Minor, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D', width = 0.5) +
xlab("Minor") +
ylab("Average Salary") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels by 45 degrees
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2019, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, 80000, by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2020, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, 80000, by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2021, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0,80000, by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
---
title: "FSB Student Success Dashboard"
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT #for better tables
)
#read in data
data=readRDS("cleaned_FSB_Student_Success")
sorted_data <- data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
p1 = ggplot(data, aes(reorder(MajorAbbr,MajorAbbr, function(x)-length(x))))+
geom_bar(color="#C3142D", fill = "#C3142D")+
xlab("Major")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p1)
sorted_data <- data %>%
group_by(MajorAbbr, FirstGen) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create a variable for the grouping of "FirstGen" and "Not FirstGen"
sorted_data$Group <- factor(sorted_data$FirstGen, levels = c(1, 0), labels = c("First Gen", "Not First Gen"))
# Create the clustered bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.5) +
xlab("Major") +
ylab("Average Salary") +
theme_bw() +
scale_fill_manual(values = c('First Gen' = "#C3142D", 'Not First Gen' = "#3A3B3C"))
# Adjust the y-axis to show more values
max_salary <- max(sorted_data$AverageSalary, na.rm = TRUE)  # Handle NA values
if (is.finite(max_salary)) {
p <- p +
scale_y_continuous(breaks = seq(0, max_salary, by = 10000), labels = scales::dollar_format(prefix = "$"))
}
# Convert to interactive plotly plot
ggplotly(p)
sorted_data <- data %>%
group_by(MajorAbbr, Honors) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create a variable for the grouping of "FirstGen" and "Not FirstGen"
sorted_data$Group <- factor(sorted_data$Honors, levels = c(1, 0), labels = c("Honors", "Not Honors"))
# Create the clustered bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.5) +
xlab("Major") +
ylab("Average Salary") +
theme_bw() +
scale_fill_manual(values = c('Honors' = "#C3142D", 'Not Honors' = "#3A3B3C"))
# Adjust the y-axis to show more values
max_salary <- max(sorted_data$AverageSalary, na.rm = TRUE)  # Handle NA values
if (is.finite(max_salary)) {
p <- p +
scale_y_continuous(breaks = seq(0, max_salary, by = 10000), labels = scales::dollar_format(prefix = "$"))
}
# Convert to interactive plotly plot
ggplotly(p)
sorted_data <- data %>%
group_by(Minor) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(Minor, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D', width = 0.5) +
xlab("Minor") +
ylab("Average Salary") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels by 45 degrees
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, max(sorted_data$AverageSalary), by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2019, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, 80000, by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2020, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0, 80000, by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
filtered_data <- data[data$Year == 2021, ]
sorted_data <- filtered_data %>%
group_by(MajorAbbr) %>%
summarize(AverageSalary = mean(Salary)) %>%
arrange(desc(AverageSalary))
# Create the bar plot with sorted MajorAbbr
p <- ggplot(sorted_data, aes(x = reorder(MajorAbbr, -AverageSalary), y = AverageSalary)) +
geom_bar(stat = 'identity', position = 'dodge', color = '#C3142D', fill = '#C3142D') +
xlab("Major") +
ylab("Average Salary") +
theme_bw()
# Adjust the y-axis to show more values
p <- p +
scale_y_continuous(breaks = seq(0,80000, by = 10000), labels = scales::dollar_format(prefix = "$"))
# Convert to interactive plotly plot
ggplotly(p)
